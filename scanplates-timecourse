#!/usr/bin/env python
import argparse
from warnings import warn
import sys
import time
from subprocess import check_output
from os import mkdir
import numpy as np
from datetime import datetime

#Additional parameters, change if you know what you are doing
geometries = {'pp1':['1760x2760+245+50', '1760x2760+2410+50', '1760x2760+2410+3205', '1760x2760+245+3205'],
'som2':['1760x2627+2311+124','1760x2627+147+133', '1760x2627+2333+3280', '1760x2627+160+3293'],
'square1':['2868x2856+1044+168', '2880x2676+1068+3324'],
'petrie1':['2112x2112+0+384', '2112x2112+2232+384', '2112x2112+2232+3504', '2112x2112+0+3504'],
'pp2':['1759x2691+352+124', '1757x2687+2572+149', '1757x2687+356+3313', '1757x2687+2595+3313'],
'som3_edge':['2034x2865+84+0', '2034x2865+2292+104', '2034x2865+97+3135', '2034x2865+2317+3135'],
'som3_noEdge_sameGrid' : ['1726x2603+257+127', '1726x2603+2434+127', '1726x2603+257+3274', '1726x2603+2434+3274'],
'maria' : ['1726x2603+257+127', '1726x2603+2434+127', '1726x2603+257+3274', '1726x2603+2434+3274'],
'null':[None, None, None, None]}


def scan_batch(nscans, interval, prefix, postfix, fixture, resolution, geometries, scanner, mode):
    ppscan = len(geometries[fixture])#plates per scan
    
    #Get geometry string and adapt to resolution
    geometry = geometries[fixture]
    
    print 'Loaded geometry settings for fixture %s: '%fixture + str(geometry)
    geometry_temp = []
    for g in geometry:
        glist = map(lambda x: str(int(int(x)*(resolution/600.0))), g.replace('+', 'x').split('x'))
        geometry_temp.append(glist[0] + 'x' + glist[1] + '+' + glist[2] + '+' + glist[3])

    print 'Geometry settings scaled to resolution: ' + str(geometry_temp)
    geometry = geometry_temp

    #Create directories
    wdir = '%s_%s/'%(prefix,postfix)
    mkdir(wdir)
    for q in range(1, ppscan+1):
        mkdir('plate_'+str(q))
    rdir = wdir + 'raw_scans/'
    mkdir(rdir)
    
    #Open log
    log = open(wdir+'/scanlog.txt', 'w')
    log.write(str(datetime.now()) + ' - Started scanplates-timecourse with the following parameters: ' + ' ,'.join([nscans, interval, prefix, postfix, fixture, resolution, geometries, scanner, mode]))
    
    print 'Successfully created directories.'


    for i in range(1, nscans+1):
        print 'Preparing for scan %i out of %i'%(i,nscans)

        cmdStr = 'scanimage --source TPU8x10 --mode %s --resolution %i --format=tiff --device-name=%s > %s%s_rawscan%s_%s.tiff'%(mode,resolution, scanner, rdir, prefix, i, postfix)
        check_output(cmdStr, shell=True)

        for plate in range(ppscan):
            cmdStr = 'convert %s%s_rawscan%s_%s.tiff -crop %s +repage -rotate 90 -flop %s%s/%s%s_%i_%s.jpg'%(rdir, prefix, i, postfix, geometry[plate], wdir, plate+1, prefix, plate+1, postfix)
            check_output(cmdStr, shell=True)


        log.write(str(datetime.now()) + 'Scan %i completed sucessfully'%i)
        time.sleep(interval*60)#Convert to seconds


def find_scanner(scanner_index):
    print 'Searching for scanners.'
    scanner_list = check_output('scanimage -L', shell=True)
    scanner_list = [s for s in scanner_list.split('\n') if not s.strip()=='']
    scanner_list = [s.split()[1][1:-1] for s in scanner_list]
    print 'Scanners found: ' + str(scanner_list)
    scanner = scanner_list[scanner_index-1]

    print 'Using scanner %s'%scanner
    return scanner



if __name__ == '__main__':
    #Set up parsing of command line arguments with argparse
    parser = argparse.ArgumentParser(description='Welcome to scanplates. Written by stephan.kamrad@crick.ac.uk and maintained at https://github.com/Bahler-Lab/scanplates.')
    
    parser.add_argument('--nscans', type=int, default=100, help='Number of time points to scan. This defaults to 100 and the script can be terminated by Ctr+C when done.')
    parser.add_argument('--interval', type=int, default=20, help='Time in minutes between scans. Defaults to 20.')
    parser.add_argument('--prefix', type=str, default=time.strftime('%Y%m%d'), help='Name prefix for output files. The default is the current date YYYYMMDD.')
    parser.add_argument('--postfix', type=str, default='', help='Name postfix for output files. Defaults to empty string.')
    parser.add_argument('--fixture', type=str, choices = list(geometries), help='ID of the fixture you are using.')
    parser.add_argument('--resolution', choices=[150,300,600,900,1200], type=int, default=600, help='Resolution for scanning in dpi. Default is 600.')
    parser.add_argument('--scanner', choices=[1,2,3], type=int, default=1, help='Which scanner to use. Scanners are not uniquely identified and may switch when turned off/unplugged. This option does not need to be set when only one scanner is connected.')
    parser.add_argument('--mode', choices=['Gray', 'Color'], type=str, default='Gray', help='Which color mode to use for scanning. Defaults to Gray.')

    args = parser.parse_args()
        
    fixture = args.fixture
    if fixture is None or fixture not in geometries:
        raise ValueError('Invalid fixture. Please choose one of the following: %s'%str(list(geometries)))
        
    scanner = find_scanner(args.scanner)
    
    scan_batch(args.nscans, args.interval, args.prefix, args.postfix, fixture, args.resolution, geometries, scanner, args.mode)
